- name: predeploy docker compose
  hosts: prod
  vars:
    - dev_path: /usr/data
  gather_facts: false
  become: true
  become_user: "root"
  become_method: "sudo"
  
  tasks:

    - name: creating data directory
      file:
        path: /usr/data
        state: directory
        owner: root
        group: root
        mode: "u=rwx,g=rx,o=rx"
        recurse: true
  
    - name: create needed content directories
      file:
        path: "{{ dev_path }}/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "u=rwx,g=rwx,o=x"
      with_items:
        - www
        - nginx_conf
        - certbot
        - pg_data
        - pgsql
        - redis_data
        - django
      tags:
        - volumes

    - name: copy nginx default.conf (test server)
      copy:
        src: "../docker_config/nginx/default.conf"
        dest: "{{ dev_path }}/nginx_conf/"
        owner: root
        group: root
        mode: "0664"
      tags:
        - conf_nginx
      when:
        - inventory_hostname in groups ["test"]

    - name: copy nginx default.conf (prod server)
      copy:
        src: "../docker_config/nginx-prod/default.conf"
        dest: "{{ dev_path }}/nginx_conf/"
        owner: root
        group: root
        mode: "0664"
      tags:
        - conf_nginx
      when:
        - inventory_hostname in groups ["prod"]

    - name: copy pgsql folder
      copy:
        src: "../docker_config/pgsql"
        dest: "{{ dev_path }}/"
        decrypt: true

    - name: copy env_file for docker-compose
      copy:
        src: "../.metadata/.env"
        dest: "/root/.env"
      tags:
        - conf_back

    - name: copy django folder (test)
      copy:
        src: "../docker_config/django/{{ item }}"
        dest: "{{ dev_path }}/django/"
      loop:
        - "Dockerfile"
        - "run.sh"
      tags:
        - conf_back
      when:
        - inventory_hostname in groups ["test"]

    - name: copy django folder (prod)
      copy:
        src: "../docker_config/django-prod/{{ item }}"
        dest: "{{ dev_path }}/django/"
      loop:
        - "Dockerfile"
        - "run.sh"
      tags:
        - conf_back
      when:
        - inventory_hostname in groups ["prod"]

    - name: download django app archive from github
      get_url:
        url: "https://github.com/The-Conference/findconf/archive/refs/heads/backend.zip"
        dest: "/root"
      tags:
        - conf_back

    - name: unzip django app
      unarchive:
        src: "/root/findconf-backend.zip"
        dest: "/root"
        remote_src: true
      tags:
        - conf_back

    - name: copy django app to data dir
      copy:
        src: "/root/findconf-backend/"
        dest: "{{ dev_path }}/django/app"
        remote_src: true
      tags:
        - conf_back

    - name: copy .env file to django poject
      copy:
        src: "../.metadata/.env"
        dest: "{{ dev_path }}/django/app/Conferences/"
      tags:
        - conf_back

    - name: copy settings.py to django (test)
      copy:
        src: "../docker_config/django/settings.py"
        dest: "{{ dev_path }}/django/app/Conferences/"
      tags:
        - conf_back
      when:
        - inventory_hostname in groups ["test"]

    - name: copy settings.py to django (prod)
      copy:
        src: "../docker_config/django-prod/settings.py"
        dest: "{{ dev_path }}/django/app/Conferences/"
      tags:
        - conf_back
      when:
        - inventory_hostname in groups ["prod"]

    - name: remove temp files from /root
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/root/findconf-backend.zip"
        - "/root/findconf-backend"
      tags:
        - conf_back
    
    - name: copy docker-compose.yml
      copy:
        src: "../docker_config/docker-compose.yml"
        dest: "{{ dev_path }}/"
      tags:
        - compose

    - name: download frontend archive from github (test)
      get_url:
        url: "https://github.com/The-Conference/findconf/archive/refs/heads/frontend.zip"
        dest: "/root"
      tags:
        - update_front
      when:
        - inventory_hostname in groups ["test"]

    - name: download frontend archive from github (prod)
      get_url:
        url: "https://github.com/The-Conference/findconf/archive/refs/heads/frontend-for-prod.zip"
        dest: "/root"
      tags:
        - update_front
      when:
        - inventory_hostname in groups ["prod"]

    - name: unzip frontend (test)
      unarchive:
        src: "/root/findconf-frontend.zip"
        dest: "/root"
        remote_src: true
      tags:
        - update_front
      when:
        - inventory_hostname in groups ["test"]

    - name: unzip frontend (prod)
      unarchive:
        src: "/root/findconf-frontend-for-prod.zip"
        dest: "/root"
        remote_src: true
      tags:
        - update_front
      when:
        - inventory_hostname in groups ["prod"]

    - name: remove old version from www
      shell:
        cmd: "rm -rf {{ dev_path }}/www/*"
      tags:
        - update_front

    - name: copy front build to www dir (test)
      copy:
        src: "/root/findconf-frontend/build/"
        dest: "{{ dev_path }}/www/"
        owner: root
        group: webadmin
        mode: "u=rwx,g=rwx,o=rx"
        remote_src: true
      tags:
        - update_front
      when:
        - inventory_hostname in groups ["test"]

    - name: copy front build to www dir (prod)
      copy:
        src: "/root/findconf-frontend-for-prod/build/"
        dest: "{{ dev_path }}/www/"
        owner: root
        group: webadmin
        mode: "u=rwx,g=rwx,o=rx"
        remote_src: true
      tags:
        - update_front
      when:
        - inventory_hostname in groups ["prod"]

    - name: remove temp files from /root (test)
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/root/findconf-frontend.zip"
        - "/root/findconf-frontend"
      tags:
        - update_front
      when:
        - inventory_hostname in groups ["test"]
    
    - name: remove temp files from /root (prod)
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/root/findconf-frontend-for-prod.zip"
        - "/root/findconf-frontend-for-prod"
      tags:
        - update_front
      when:
        - inventory_hostname in groups ["prod"]

    - name: copy certbot scripts to test
      copy:
        src: "../scripts-test/certbot.sh"
        dest: "/usr/local/bin/certbot.sh"
        owner: root
        group: root
        mode: "u=rwx,g=rx,o=r"
      tags:
        - scripts
      when:
        - inventory_hostname in groups ["test"]

    - name: copy certbot scripts to prod
      copy:
        src: "../scripts-prod/certbot.sh"
        dest: "/usr/local/bin/certbot.sh"
        owner: root
        group: root
        mode: "u=rwx,g=rx,o=r"
      tags:
        - scripts
      when:
        - inventory_hostname in groups ["prod"]

    - name: add certbot.sh to crontab (test)
      lineinfile:
        path: "/etc/crontab"
        state: present
        search_string: '01 23    * * 6   root    /usr/local/bin/certbot.sh'
        line: '01 23    * * 6   root    /usr/local/bin/certbot.sh'
      tags:
        - scripts
      when:
        - inventory_hostname in groups ["test"]

    - name: add certbot.sh to crontab (prod)
      lineinfile:
        path: "/etc/crontab"
        state: present
        search_string: '01 22    * * 6   root    /usr/local/bin/certbot.sh'
        line: '01 22    * * 6   root    /usr/local/bin/certbot.sh'
      tags:
        - scripts
      when:
        - inventory_hostname in groups ["prod"]
  

    